#
# ~./config/hypr/general.conf
# Hyprland general config
# Check https://wiki.hyprland.org/ for more info
#

### Section
# Description | type | default
# variable = value

### General
general {
    ### Borders
    # size of the border around windows | int | 1
    border_size = 2

    # disable borders for floating windows | bool | false
    no_border_on_floating = false

    # enables resizing windows by clicking and dragging on borders and gaps | bool | false
    resize_on_border = true

    # extends the area around the border where you can click and drag on, only used when general:resize_on_border is on. | int | 15
    extend_border_grab_area = 15

    # show a cursor icon when hovering over borders, only used when general:resize_on_border is on. | bool | true
    hover_icon_on_border = true

    # border color for inactive windows | gradient | 0xffffffff
    col.inactive_border = $color_inactive_border

    # border color for the active window | gradient | 0xff444444
    col.active_border = $color_active_border

    # inactive border color for window that cannot be added to a group (see denywindowfromgroup dispatcher) | gradient | 0xffffaaff
    col.nogroup_border = $color_nogroup_border

    # active border color for window that cannot be added to a group | gradient | 0xffff00ff
    col.nogroup_border_active = $color_nogroup_border_active

    ### Gaps
    # gaps between windows | int | 5
    gaps_in = 5

    # gaps between windows and monitor edges | int | 20
    gaps_out = 10

    # gaps between workspaces. Stacks with gaps_out. | int | 0
    gaps_workspaces = 0

    ### Focus
    # in seconds, after how many seconds of cursor’s inactivity to hide it. Set to 0 for never. | int | 0
    cursor_inactive_timeout = 5

    # if true, will not warp the cursor in many cases (focusing, keybinds, etc) | bool | false
    no_cursor_warps = false

    # if true, will not fall back to the next available window when moving focus in a direction where no window was found | bool | false
    no_focus_fallback = false

    ### Layout and functionality
    # which layout to use. (Available: dwindle, master) | str | dwindle
    layout = dwindle

    # master switch for allowing tearing to occur. See the Tearing page. | bool | false
    allow_tearing = true
}

### Dwindle layout
dwindle {
    # enable pseudotiling. Pseudotiled windows retain their floating size when tiled. | bool | false
    pseudotile = true

    # 0 -> split follows mouse, 1 -> always split to the left (new = left or top) 2 -> always split to the right (new = right or bottom) | int | 0
    force_split = 2

    # if enabled, the split (side/top) will not change regardless of what happens to the container. | bool | false
    preserve_split = false

    # if enabled, allows a more precise control over the window split direction based on the cursor’s position. The window is conceptually divided into four triangles, and cursor’s triangle determines the split direction. This feature also turns on preserve_split. | bool | false
    smart_split = false

    # if enabled, resizing direction will be determined by the mouse’s position on the window (nearest to which corner). Else, it is based on the window’s tiling position. | bool | true
    smart_resizing = true

    # if enabled, makes the preselect direction persist until either this mode is turned off, another direction is specified, or a non-direction is specified (anything other than l,r,u/t,d/b) | bool | false
    permanent_direction_override = false

    # 0 - 1 -> specifies the scale factor of windows on the special workspace | float | 0.8
    special_scale_factor = 0.9

    # specifies the auto-split width multiplier float 1.0
    split_width_multiplier = 1.0

    # whether to apply gaps when there is only one window on a workspace, aka. smart gaps. (default: disabled - 0) no border - 1, with border - 2 | int | 0
    no_gaps_when_only = 1

    # whether to prefer the active window or the mouse position for splits | bool | true
    use_active_for_splits = true

    # the default split ratio on window open. 1 means even 50/50 split. 0.1 - 1.9 | float | 1.0
    default_split_ratio = 1.0
}

### Master layout
master {
    # enable adding additional master windows in a horizontal split style | bool | false
    allow_small_split = true

    # (0.0 - 1.0) the scale of the special workspace windows | float | 0.8
    special_scale_factor = 0.9

    # (0.0 - 1.0) master split factor, the ratio of master split | float | 0.55
    mfact = 0.618

    # whether a newly open window should replace the master or join the slaves. bool true
    new_is_master = true

    # whether a newly open window should be on the top of the stack bool false
    new_on_top = false

    # whether to apply gaps when there is only one window on a workspace, aka. smart gaps. (default: disabled - 0) no border - 1, with border - 2 int 0
    no_gaps_when_only = 1

    # default placement of the master area, can be left, right, top, bottom or center string left
    orientation = top

    # inherit fullscreen status when cycling/swapping to another window (e.g. monocle layout) bool true
    inherit_fullscreen = true

    # when using orientation=center, keep the master window centered, even when it is the only window in the workspace. bool false
    always_center_master =  false

    # if enabled, resizing direction will be determined by the mouse’s position on the window (nearest to which corner). Else, it is based on the window’s tiling position. bool true
    smart_resizing = true

    # when enabled, dragging and dropping windows will put them at the cursor position. Otherwise, when dropped at the stack side, they will go to the top/bottom of the stack depending on new_on_top. bool true
    drop_at_cursor = true
}